const express = require('express');

const router = express.Router();
const { db } = require('../conf');

router.get('/:id', async (req, res) => {
  const { id } = req.params;
  const sql =
    'SELECT id, companyName, zipCode, city, country, address FROM exploitations WHERE companyNationalID=?';
  const sqlValues = [id];
  const [[results]] = await db.query(sql, sqlValues);
  res.json(results);
});

router.post('/linkuser/', async (req, res) => {
  const { idUser, idExploitation } = req.body;
  const sql = `
  INSERT INTO 
    exploitations_has_users (idUser, idExploitation) 
  VALUES(?,?)`;
  const sqlValues = [idUser, idExploitation];

  try {
    const [results] = await db.query(sql, sqlValues);
    return res.status(201).json(results);
  } catch (err) {
    return res.status(500).send('Generic error message');
  }
});

router.get('/linkuser/:id', async (req, res) => {
  const { id } = req.params;
  const sql = `
  SELECT 
  exploitations.id, companyName, companyNationalID, exploitations.zipCode, exploitations.city, exploitations.country, exploitations.address
  FROM 
    exploitations_has_users
  JOIN 
    users
  ON 
    users.id=exploitations_has_users.idUser
  JOIN 
    exploitations 
  ON 
    exploitations.id=exploitations_has_users.idExploitation
  WHERE 
    users.id=?`;
  const sqlValues = [id];
  const [results] = await db.query(sql, sqlValues);
  res.json(results);
});

router.post('/', async (req, res) => {
  const {
    companyName,
    companyNationalID,
    zipCode,
    city,
    country,
    address,
    idUser,
  } = req.body;
  try {
    const sqlValues = [
      companyName,
      companyNationalID,
      zipCode,
      city,
      country,
      address,
      idUser,
    ];
    const sql =
      'INSERT INTO exploitations (companyName, companyNationalID, zipCode, city, country, address) VALUES(?,?,?,?,?,?)';
    const [results] = await db.query(sql, sqlValues);

    const idExploitation = results.insertId;
    const sqlValues2 = [idUser, idExploitation];
    const sql2 = `
    INSERT INTO 
    exploitations_has_users (idUser, idExploitation) 
    VALUES(?,?)`;
    await db.query(sql2, sqlValues2);

    return res.status(201).json();
  } catch (err) {
    if (err.code === 'ER_DUP_ENTRY') {
      // 409: Conflict
      return res.status(409).send('This exploitation already exists!');
    }
    if (err.code === 'ER_BAD_NULL_ERROR') {
      // 422 : Unprocessable Entity
      return res.status(422).send('Please fill all fields!');
    }
    return res.status(500).send('Generic error message');
  }
});

module.exports = router;
